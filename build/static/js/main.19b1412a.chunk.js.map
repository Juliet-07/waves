{"version":3,"sources":["logo.svg","App.js","Table.jsx","Form.jsx","Header.jsx","Challenge.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","Table","props","Paper","style","padding","margin","width","TableHead","TableRow","TableCell","TableBody","users","map","item","firstName","lastName","birthday","age","hobby","UserForm","initialFormState","useState","user","setUser","handleInput","target","name","value","console","log","Grid","TextField","label","onChange","InputLabelProps","shrink","type","Button","color","variant","onClick","e","preventDefault","addUser","NavBar","AppBar","Toolbar","Typography","Component","Tan","container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19b1412a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport {Paper, TableHead, TableBody, TableRow, TableCell} from '@material-ui/core'\nconst Table = props =>{\n    return(\n        <Paper style={{padding:30, margin:30, width:500}}>\n            <TableHead>\n                <TableRow>\n                    <TableCell>First Name</TableCell>\n                    <TableCell>Last Name</TableCell>\n                    <TableCell>Birthday</TableCell>\n                    <TableCell>Age</TableCell>\n                    <TableCell>Hobby</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    props.users.map(item=>{\n                        return(\n                            <TableRow>\n                                <TableCell>{item.firstName}</TableCell>\n                                <TableCell>{item.lastName}</TableCell>\n                                <TableCell>{item.birthday}</TableCell>\n                                <TableCell>{item.age}</TableCell>\n                                <TableCell>{item.hobby}</TableCell>\n                            </TableRow>\n                        )\n                    })\n                }\n            </TableBody>\n        </Paper>\n    )\n    }\nexport default Table","import React, {useState} from 'react'\nimport {Grid, TextField, Paper, Button} from '@material-ui/core'\n\nconst UserForm = props =>{\n    const initialFormState = {\n        firstName:'',\n        lastName:'',\n        birthday:'',\n        age:'',\n        hobby:''\n    }\n    const [user, setUser] =useState(initialFormState)\n\n    const handleInput= ({target}) =>{\n        const {name, value} = target\n        setUser({...user,[name]:value})\n        console.log(value)\n    }\n    const handleSubmit = e =>{\n        e.preventDefault()\n        if(user.firstName && user.lastName && user.birthday && user.age && user.hobby){\n            setUser(initialFormState)\n            return props.addUser(user)\n        }\n    }\n    return(\n        <Paper style={{margin:30, padding:30, width:500}}>\n            <form>\n                <Grid>\n                <Grid>\n                    <TextField label='First Name' style={{}} name='firstName' value={user.firstName} onChange={handleInput}></TextField>\n                </Grid>\n                <Grid>\n                    <TextField label='Last Name' style={{}} name='lastName' value={user.lastName} onChange={handleInput}></TextField>\n                </Grid>\n                <Grid>\n                    <TextField label='Date Of Birth' style={{}} InputLabelProps={{shrink: true}} type='date' name='birthday' value={user.birthday} onChange={handleInput}></TextField>\n                </Grid>\n                <Grid>\n                    <TextField label='Age' style={{}} name='age' value={user.age} onChange={handleInput}></TextField>\n                </Grid>\n                <Grid>\n                    <TextField label='Hobby' style={{}} name='hobby' value={user.hobby} onChange={handleInput}></TextField>\n                </Grid>\n                <Grid>\n                <Button type='submit' color='primary' variant='contained' onClick={handleSubmit}>Add</Button>\n                </Grid>\n                </Grid>\n            </form>\n        </Paper>\n            \n    )\n}\nexport default UserForm","import React, {Component} from 'react'\nimport {AppBar, Toolbar, Typography} from '@material-ui/core/'\n\n\n\nclass NavBar extends Component{\n    render(){\n        return(\n            <div>\n                <AppBar>\n                    <Toolbar>\n                    <Typography variant='title' color='green'>USER FORM</Typography>\n                    </Toolbar>\n                </AppBar>\n            </div>\n        )\n    }\n}\nexport default NavBar","import React, { Fragment, useState} from 'react'\nimport {Grid} from '@material-ui/core'\nimport Table from './Table'\nimport UserForm from './Form'\nimport NavBar from './Header'\n\nconst Tan = () =>{\n    const UserState = [\n        {\n            firstName:'',\n            lastName:'',\n            birthday:'',\n            age:'',\n            hobby:''\n        }\n    ]\n    const [users, setUser]=useState(UserState)\n    const addUser =user=>{\n        setUser([...users, user])\n    }\n    return(\n        <Fragment>\n            <Grid container>\n                <UserForm addUser={addUser}/>\n                <Table users={users}/>\n                <NavBar/>\n            </Grid>\n        </Fragment>\n    )\n}\nexport default Tan","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Tan from './Challenge'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Tan/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}